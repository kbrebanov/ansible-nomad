---
# tasks file for nomad

- name: Check if both nomad_server and nomad_client set
  fail: msg='nomad_server and nomad_client were both set. According to https://nomadproject.io/docs/agent/config.html, "Note that it is strongly recommended not to operate a node as both client and server".'
  when: nomad_server and nomad_client

- name: Include distribution specific variables
  include_vars: "{{ ansible_distribution }}.yml"
  tags:
    - nomad

- include: CentOS.yml
  when: ansible_distribution == "CentOS"
  tags:
    - nomad

- include: Ubuntu.yml
  when: ansible_distribution == "Ubuntu"
  tags:
    - nomad

- name: Create Nomad group
  become: yes
  group:
    name: "{{ nomad_group }}"
    system: yes
    state: present
  when: nomad_server
  tags:
    - nomad

- name: Create Nomad user
  become: yes
  user:
    name: "{{ nomad_user }}"
    shell: /bin/false
    createhome: no
    group: "{{ nomad_group }}"
    system: yes
    state: present
  when: nomad_server
  tags:
    - nomad

- name: Check if Nomad is already installed
  stat:
    path: "{{ nomad_install_dir }}/nomad"
  register: nomad_bin
  changed_when: false
  tags:
    - nomad

- name: Get currently installed Nomad version
  shell: "{{ nomad_install_dir }}/nomad version | grep '^Nomad' | cut -d' ' -f2 | sed -e 's/^v//'"
  register: installed_nomad_version
  when: nomad_bin.stat.exists
  changed_when: false
  tags:
    - nomad

- name: Get list of installed Nomad files
  shell: ls -1 {{ nomad_install_dir }}/nomad*
  register: nomad_files
  when: not installed_nomad_version | skipped
  changed_when: false
  tags:
    - nomad

- name: Download Nomad
  become: yes
  get_url:
    url: "{{ nomad_url }}"
    dest: "{{ nomad_download_dir }}/nomad.zip"
    sha256sum: "{{ nomad_sha256sum }}"
  tags:
    - nomad

- name: Remove Nomad files if version is different
  become: yes
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ nomad_files.stdout_lines | default([]) }}"
  when:
    - not installed_nomad_version | skipped
    - installed_nomad_version.stdout != nomad_version
  notify:
    - restart nomad
  tags:
    - nomad

- name: Unzip Nomad to installation directory
  become: yes
  command: unzip {{ nomad_download_dir }}/nomad.zip -d {{ nomad_install_dir }}
  args:
    creates: "{{ nomad_install_dir }}/nomad"
  tags:
    - nomad

- name: Create Nomad configuration directory
  become: yes
  file:
    path: "{{ nomad_config_dir }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  tags:
    - nomad

- name: Create Nomad data directory
  become: yes
  file:
    path: "{{ nomad_data_dir }}"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: 0755
    state: directory
  tags:
    - nomad

- name: Create Nomad upstart configuration
  become: yes
  when: nomad_use_upstart
  template:
    src: nomad.conf.j2
    dest: /etc/init/nomad.conf
    owner: root
    group: root
    mode: 0644
  notify:
    - restart nomad
  tags:
    - nomad

- name: Create Nomad systemd configuration
  become: yes
  when: nomad_use_systemd
  template:
    src: nomad.service.j2
    dest: /etc/systemd/system/nomad.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd
    - restart nomad
  tags:
    - nomad

- name: Create Nomad configuration file
  become: yes
  template:
    src: nomad.hcl.j2
    dest: "{{ nomad_config_dir }}/nomad.hcl"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart nomad
  tags:
    - nomad

- name: Create Nomad server configuration file
  become: yes
  template:
    src: server.hcl.j2
    dest: "{{ nomad_config_dir }}/server.hcl"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart nomad
  when: nomad_server
  tags:
    - nomad

- name: Create Nomad client configuration file
  become: yes
  template:
    src: client.hcl.j2
    dest: "{{ nomad_config_dir }}/client.hcl"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart nomad
  when: nomad_client
  tags:
    - nomad

- name: Create Nomad Atlas configuration file
  become: yes
  template:
    src: atlas.hcl.j2
    dest: "{{ nomad_config_dir }}/atlas.hcl"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart nomad
  when: nomad_atlas
  tags:
    - nomad

- name: Ensure Nomad service is started and enabled on boot
  become: yes
  service:
    name: "{{ nomad_service_name }}"
    state: started
    enabled: yes
  tags:
    - nomad
